// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name MoyasarSdk
import Combine
import DeveloperToolsSupport
import Foundation
@_exported import MoyasarSdk
import PassKit
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum ApiPaymentSource {
  case creditCard(MoyasarSdk.ApiCreditCardSource)
  case applePay(MoyasarSdk.ApiApplePaySource)
  case stcPay(MoyasarSdk.ApiStcPaySource)
}
extension MoyasarSdk.ApiPaymentSource : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct ApiToken : Swift.Codable {
  public var id: Swift.String
  public var status: Swift.String
  public var brand: Swift.String
  public var funding: Swift.String
  public var country: Swift.String
  public var month: Swift.String
  public var year: Swift.String
  public var name: Swift.String
  public var lastFour: Swift.String
  public var metadata: [Swift.String : Swift.String]?
  public var message: Swift.String?
  public var verificationUrl: Swift.String?
  public var createdAt: Swift.String
  public var updatedAt: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_Concurrency.MainActor(unsafe) public struct CreditCardView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(request: MoyasarSdk.PaymentRequest, callback: @escaping MoyasarSdk.ResultCallback)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10MoyasarSdk14CreditCardViewV4bodyQrvp", 0) __
}
public struct ApiPayment : Swift.Codable {
  public var id: Swift.String
  public var status: MoyasarSdk.ApiPaymentStatus
  public var amount: Swift.Int
  public var amountFormat: Swift.String
  public var fee: Swift.Int
  public var feeFormat: Swift.String?
  public var currency: Swift.String
  public var refunded: Swift.Int
  public var refundedAt: Swift.String?
  public var refundedFormat: Swift.String?
  public var captured: Swift.Int
  public var capturedAt: Swift.String?
  public var capturedFormat: Swift.String?
  public var voidedAt: Swift.String?
  public var description: Swift.String?
  public var invoiceId: Swift.String?
  public var ip: Swift.String?
  public var callbackUrl: Swift.String?
  public var createdAt: Swift.String
  public var updatedAt: Swift.String
  public var metadata: [Swift.String : Swift.String]?
  public var source: MoyasarSdk.ApiPaymentSource
  public func isInitiated() -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
final public class PaymentService {
  public init(apiKey: Swift.String, baseUrl: Swift.String = "https://api.moyasar.com") throws
  #if compiler(>=5.3) && $AsyncAwait
  final public func createPayment(_ paymentRequest: MoyasarSdk.ApiPaymentRequest) async throws -> MoyasarSdk.ApiPayment
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func createToken(_ tokenRequest: MoyasarSdk.ApiTokenRequest) async throws -> MoyasarSdk.ApiToken
  #endif
  @objc deinit
}
public enum ApiPaymentStatus : Swift.String, Swift.Codable {
  case initiated
  case paid
  case failed
  case authorized
  case captured
  case refunded
  case voided
  case verified
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
final public class ApplePayService {
  public init(apiKey: Swift.String) throws
  #if compiler(>=5.3) && $AsyncAwait
  final public func authorizePayment(request: MoyasarSdk.PaymentRequest, token: PassKit.PKPaymentToken) async throws -> MoyasarSdk.ApiPayment
  #endif
  @objc deinit
}
public struct ApiError : Swift.Codable {
  public var message: Swift.String?
  public var type: Swift.String?
  public var errors: MoyasarSdk.ApiErrorDetail
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ApiErrorDetail {
  case single(Swift.String?)
  case multi(MoyasarSdk.ApiMutliError)
}
extension MoyasarSdk.ApiErrorDetail : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public typealias ApiMutliError = [Swift.String : [Swift.String]?]?
public enum MoyasarError : Swift.Error {
  case apiKeyNotSet
  case invalidApiKey(Swift.String)
  case networkError(any Swift.Error)
  case authorizationError(Swift.String)
  case apiError(MoyasarSdk.ApiError)
  case unexpectedError(Swift.String)
  case webviewTimedOut(MoyasarSdk.ApiPayment)
  case webviewNotConnectedToInternet(MoyasarSdk.ApiPayment)
  case webviewUnexpectedError(MoyasarSdk.ApiPayment, any Swift.Error)
}
public struct PaymentRequest {
  public init(apiKey: Swift.String, baseUrl: Swift.String = "https://api.moyasar.com", amount: Swift.Int, currency: Swift.String = "SAR", description: Swift.String, metadata: [Swift.String : Swift.String] = [:], manual: Swift.Bool = false, saveCard: Swift.Bool = false, createSaveOnlyToken: Swift.Bool = false, allowedNetworks: [MoyasarSdk.CreditCardNetwork] = CreditCardNetwork.allCases)
  public var apiKey: Swift.String
  public var baseUrl: Swift.String
  public var amount: Swift.Int
  public var currency: Swift.String
  public var description: Swift.String
  public var metadata: [Swift.String : Swift.String]
  public var manual: Swift.Bool
  public var saveCard: Swift.Bool
  public var createSaveOnlyToken: Swift.Bool
  public var allowedNetworks: [MoyasarSdk.CreditCardNetwork]
}
public enum CreditCardNetwork : Swift.CaseIterable {
  case amex
  case mada
  case visa
  case mastercard
  case unknown
  public static func == (a: MoyasarSdk.CreditCardNetwork, b: MoyasarSdk.CreditCardNetwork) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [MoyasarSdk.CreditCardNetwork]
  public static var allCases: [MoyasarSdk.CreditCardNetwork] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ApiApplePaySource : Swift.Codable {
  public init(type: Swift.String = "applepay", token: Swift.String? = nil, company: Swift.String? = nil, name: Swift.String? = nil, number: Swift.String? = nil, message: Swift.String? = nil, manual: Swift.String? = nil, gatewayId: Swift.String? = nil, referenceNumber: Swift.String? = nil, responseCode: Swift.String? = nil, authorizationCode: Swift.String? = nil, issuerName: Swift.String? = nil, issuerCountry: Swift.String? = nil, issuerCardType: Swift.String? = nil, isserCardCategory: Swift.String? = nil)
  public var type: Swift.String
  public var token: Swift.String?
  public var company: Swift.String?
  public var name: Swift.String?
  public var number: Swift.String?
  public var message: Swift.String?
  public var manual: Swift.String?
  public var gatewayId: Swift.String?
  public var referenceNumber: Swift.String?
  public var responseCode: Swift.String?
  public var authorizationCode: Swift.String?
  public var issuerName: Swift.String?
  public var issuerCountry: Swift.String?
  public var issuerCardType: Swift.String?
  public var isserCardCategory: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MoyasarSdk.ApiApplePaySource {
  public static func fromPKToken(_ token: PassKit.PKPaymentToken) throws -> MoyasarSdk.ApiApplePaySource
}
public struct ApplePayToken : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ApplePayPaymentMethod : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ApplePayPaymentPass : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PaymentAuthView : SwiftUI.UIViewRepresentable {
  public var url: Foundation.URL
  public var callback: MoyasarSdk.WebViewResultCallback
  @_Concurrency.MainActor(unsafe) public func makeCoordinator() -> MoyasarSdk.PaymentAuthView.Coordinator
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: MoyasarSdk.PaymentAuthView.Context) -> WebKit.WKWebView
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ wkWebView: WebKit.WKWebView, context: MoyasarSdk.PaymentAuthView.Context)
  @objc @_hasMissingDesignatedInitializers public class Coordinator : ObjectiveC.NSObject, WebKit.WKNavigationDelegate {
    @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
    @objc public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
    @objc public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
    @objc deinit
  }
  public typealias Body = Swift.Never
  public typealias UIViewType = WebKit.WKWebView
}
public typealias WebViewResultCallback = (MoyasarSdk.WebViewResult) -> ()
public struct WebViewPaymentInfo {
}
public enum WebViewResult {
  case completed(MoyasarSdk.WebViewPaymentInfo)
  case failed(MoyasarSdk.PaymentAuthError)
}
public enum PaymentAuthError : Swift.Error {
  case timeOut
  case notConnectedToInternet
  case unexpectedError(any Swift.Error)
}
public enum PaymentResult {
  case completed(MoyasarSdk.ApiPayment)
  case saveOnlyToken(MoyasarSdk.ApiToken)
  case failed(MoyasarSdk.MoyasarError)
  case canceled
}
@_Concurrency.MainActor public class CreditCardViewModel : Foundation.ObservableObject {
  @_Concurrency.MainActor public init(paymentRequest: MoyasarSdk.PaymentRequest, resultCallback: @escaping MoyasarSdk.ResultCallback) throws
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public typealias ResultCallback = (MoyasarSdk.PaymentResult) -> ()
public struct ApiCreditCardSource : Swift.Codable {
  public init(type: Swift.String = "creditcard", name: Swift.String, number: Swift.String, month: Swift.String? = nil, year: Swift.String? = nil, cvc: Swift.String? = nil, transactionUrl: Swift.String? = nil, message: Swift.String? = nil, token: Swift.String? = nil, manual: Swift.String? = nil, saveCard: Swift.String? = nil, company: Swift.String? = nil, gatewayId: Swift.String? = nil, referenceNumber: Swift.String? = nil, responseCode: Swift.String? = nil, authorizationCode: Swift.String? = nil, issuerName: Swift.String? = nil, issuerCountry: Swift.String? = nil, issuerCardType: Swift.String? = nil, isserCardCategory: Swift.String? = nil)
  public var type: Swift.String
  public var name: Swift.String
  public var number: Swift.String
  public var month: Swift.String?
  public var year: Swift.String?
  public var cvc: Swift.String?
  public var transactionUrl: Swift.String?
  public var message: Swift.String?
  public var token: Swift.String?
  public var manual: Swift.String?
  public var saveCard: Swift.String?
  public var company: Swift.String?
  public var gatewayId: Swift.String?
  public var referenceNumber: Swift.String?
  public var responseCode: Swift.String?
  public var authorizationCode: Swift.String?
  public var issuerName: Swift.String?
  public var issuerCountry: Swift.String?
  public var issuerCardType: Swift.String?
  public var isserCardCategory: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ApiPaymentRequest : Swift.Codable {
  public init(amount: Swift.Int, currency: Swift.String, description: Swift.String, callbackUrl: Swift.String? = nil, source: MoyasarSdk.ApiPaymentSource, metadata: [Swift.String : Swift.String]? = nil)
  public var amount: Swift.Int
  public var currency: Swift.String
  public var description: Swift.String
  public var callbackUrl: Swift.String?
  public var source: MoyasarSdk.ApiPaymentSource
  public var metadata: [Swift.String : Swift.String]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ApiStcPaySource : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ApiTokenRequest : Swift.Codable {
  public init(name: Swift.String, number: Swift.String, cvc: Swift.String?, month: Swift.String?, year: Swift.String?, saveOnly: Swift.Bool = false, callbackUrl: Swift.String?, metadata: [Swift.String : Swift.String]? = [:])
  public var name: Swift.String
  public var number: Swift.String
  public var cvc: Swift.String?
  public var month: Swift.String?
  public var year: Swift.String?
  public var saveOnly: Swift.Bool
  public var callbackUrl: Swift.String?
  public var metadata: [Swift.String : Swift.String]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MoyasarSdk.ApiPaymentStatus : Swift.Equatable {}
extension MoyasarSdk.ApiPaymentStatus : Swift.Hashable {}
extension MoyasarSdk.ApiPaymentStatus : Swift.RawRepresentable {}
extension MoyasarSdk.CreditCardNetwork : Swift.Equatable {}
extension MoyasarSdk.CreditCardNetwork : Swift.Hashable {}
extension MoyasarSdk.CreditCardViewModel : Swift.Sendable {}
