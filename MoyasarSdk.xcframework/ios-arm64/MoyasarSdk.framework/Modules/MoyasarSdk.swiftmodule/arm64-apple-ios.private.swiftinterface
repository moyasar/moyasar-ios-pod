// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name MoyasarSdk
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import Combine
import DeveloperToolsSupport
import Foundation
@_exported import MoyasarSdk
import PassKit
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum ApiPaymentSource {
  case creditCard(MoyasarSdk.ApiCreditCardSource)
  case applePay(MoyasarSdk.ApiApplePaySource)
  case stcPay(MoyasarSdk.ApiSTCPaySource)
}
extension MoyasarSdk.ApiPaymentSource : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@_Concurrency.MainActor @preconcurrency public struct STCPayView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(paymentRequest: MoyasarSdk.PaymentRequest, callback: @escaping MoyasarSdk.STCResultCallback)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10MoyasarSdk10STCPayViewV4bodyQrvp", 0) __
}
public struct ApiToken : Swift.Codable {
  public var id: Swift.String
  public var status: Swift.String
  public var brand: Swift.String
  public var funding: Swift.String
  public var country: Swift.String
  public var month: Swift.String
  public var year: Swift.String
  public var name: Swift.String
  public var lastFour: Swift.String
  public var metadata: [Swift.String : MoyasarSdk.MetadataValue]?
  public var message: Swift.String?
  public var verificationUrl: Swift.String?
  public var createdAt: Swift.String
  public var updatedAt: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum MoyasarLanguageCode : Swift.String {
  case ar
  case en
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class MoyasarLanguageManager {
  public static let shared: MoyasarSdk.MoyasarLanguageManager
  public func setLanguage(_ language: MoyasarSdk.MoyasarLanguageCode)
  public var currentLanguage: SwiftUICore.LayoutDirection {
    get
  }
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct CreditCardView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(request: MoyasarSdk.PaymentRequest, callback: @escaping MoyasarSdk.ResultCallback)
  @_Concurrency.MainActor @preconcurrency public init(viewModel: MoyasarSdk.CreditCardViewModel)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10MoyasarSdk14CreditCardViewV4bodyQrvp", 0) __
}
public struct ApiPayment : Swift.Codable {
  public var id: Swift.String
  public var status: MoyasarSdk.ApiPaymentStatus
  public var amount: Swift.Int
  public var amountFormat: Swift.String
  public var fee: Swift.Int
  public var feeFormat: Swift.String?
  public var currency: Swift.String
  public var refunded: Swift.Int
  public var refundedAt: Swift.String?
  public var refundedFormat: Swift.String?
  public var captured: Swift.Int
  public var capturedAt: Swift.String?
  public var capturedFormat: Swift.String?
  public var voidedAt: Swift.String?
  public var description: Swift.String?
  public var invoiceId: Swift.String?
  public var ip: Swift.String?
  public var callbackUrl: Swift.String?
  public var createdAt: Swift.String
  public var updatedAt: Swift.String
  public var metadata: [Swift.String : MoyasarSdk.MetadataValue]?
  public var source: MoyasarSdk.ApiPaymentSource
  public func isInitiated() -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
final public class PaymentService {
  public init(apiKey: Swift.String, baseUrl: Swift.String = "https://api.moyasar.com")
  final public func createPayment(_ paymentRequest: MoyasarSdk.ApiPaymentRequest) async throws -> MoyasarSdk.ApiPayment
  final public func createToken(_ tokenRequest: MoyasarSdk.ApiTokenRequest) async throws -> MoyasarSdk.ApiToken
  final public func sendSTCPaymentRequest(url: Foundation.URL, stcOtpRequest: MoyasarSdk.StcOtpRequest) async throws -> MoyasarSdk.ApiPayment
  @objc deinit
}
public enum ApiPaymentStatus : Swift.String, Swift.Codable {
  case initiated
  case paid
  case failed
  case authorized
  case captured
  case refunded
  case voided
  case verified
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
final public class ApplePayService {
  public init(apiKey: Swift.String, baseUrl: Swift.String = "https://api.moyasar.com") throws
  final public func authorizePayment(request: MoyasarSdk.PaymentRequest, token: PassKit.PKPaymentToken) async throws -> MoyasarSdk.ApiPayment
  @objc deinit
}
public struct ApiError : Swift.Codable {
  public var message: Swift.String?
  public var type: Swift.String?
  public var errors: MoyasarSdk.ApiErrorDetail
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ApiErrorDetail {
  case single(Swift.String?)
  case multi(MoyasarSdk.ApiMutliError)
}
extension MoyasarSdk.ApiErrorDetail : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public typealias ApiMutliError = [Swift.String : [Swift.String]?]?
public enum MoyasarError : Swift.Error {
  case apiKeyNotSet
  case invalidApiKey(Swift.String)
  case networkError(any Swift.Error)
  case authorizationError(Swift.String)
  case apiError(MoyasarSdk.ApiError)
  case unexpectedError(Swift.String)
  case webviewTimedOut(MoyasarSdk.ApiPayment)
  case webviewNotConnectedToInternet(MoyasarSdk.ApiPayment)
  case webviewUnexpectedError(MoyasarSdk.ApiPayment, any Swift.Error)
}
public struct PaymentRequest {
  public init(apiKey: Swift.String, baseUrl: Swift.String = "https://api.moyasar.com", amount: Swift.Int, currency: Swift.String = "SAR", description: Swift.String? = nil, metadata: [Swift.String : MoyasarSdk.MetadataValue] = [:], manual: Swift.Bool = false, saveCard: Swift.Bool = false, givenID: Swift.String? = nil, createSaveOnlyToken: Swift.Bool = false, allowedNetworks: [MoyasarSdk.CreditCardNetwork] = [.mada, .visa, .mastercard], payButtonType: MoyasarSdk.PayButtonType = .pay) throws
  public var apiKey: Swift.String
  public var baseUrl: Swift.String
  public var amount: Swift.Int
  public var currency: Swift.String
  public var description: Swift.String?
  public var metadata: [Swift.String : MoyasarSdk.MetadataValue]
  public var manual: Swift.Bool
  public var saveCard: Swift.Bool
  public var givenID: Swift.String?
  public var createSaveOnlyToken: Swift.Bool
  public var allowedNetworks: [MoyasarSdk.CreditCardNetwork]
  public var cashier: Swift.String?
  public var branch: Swift.String?
  public var payButtonType: MoyasarSdk.PayButtonType
}
public enum PayButtonType {
  case plain
  case pay
  case buy
  case book
  case rent
  case continueType
  case donate
  case topUp
  case order
  case support
  public static func == (a: MoyasarSdk.PayButtonType, b: MoyasarSdk.PayButtonType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CreditCardNetwork : Swift.CaseIterable {
  case amex
  case mada
  case visa
  case mastercard
  case unknown
  public static func == (a: MoyasarSdk.CreditCardNetwork, b: MoyasarSdk.CreditCardNetwork) -> Swift.Bool
  public typealias AllCases = [MoyasarSdk.CreditCardNetwork]
  nonisolated public static var allCases: [MoyasarSdk.CreditCardNetwork] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ApiApplePaySource : Swift.Codable {
  public init(type: Swift.String = "applepay", token: Swift.String? = nil, company: Swift.String? = nil, name: Swift.String? = nil, number: Swift.String? = nil, message: Swift.String? = nil, manual: Swift.String? = nil, gatewayId: Swift.String? = nil, referenceNumber: Swift.String? = nil, responseCode: Swift.String? = nil, authorizationCode: Swift.String? = nil, issuerName: Swift.String? = nil, issuerCountry: Swift.String? = nil, issuerCardType: Swift.String? = nil, isserCardCategory: Swift.String? = nil, saveCard: Swift.Bool? = false)
  public var type: Swift.String
  public var token: Swift.String?
  public var company: Swift.String?
  public var name: Swift.String?
  public var number: Swift.String?
  public var message: Swift.String?
  public var manual: Swift.String?
  public var gatewayId: Swift.String?
  public var referenceNumber: Swift.String?
  public var responseCode: Swift.String?
  public var authorizationCode: Swift.String?
  public var issuerName: Swift.String?
  public var issuerCountry: Swift.String?
  public var issuerCardType: Swift.String?
  public var isserCardCategory: Swift.String?
  public var saveCard: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MoyasarSdk.ApiApplePaySource {
  public static func fromPKToken(_ token: PassKit.PKPaymentToken) throws -> MoyasarSdk.ApiApplePaySource
}
public struct ApplePayToken : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ApplePayPaymentMethod : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ApplePayPaymentPass : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ApiSTCPaySource : Swift.Codable {
  public let type: Swift.String?
  public let mobile: Swift.String?
  public let referenceNumber: Swift.String?
  public let transactionUrl: Swift.String?
  public let message: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_Concurrency.MainActor public class STCPayViewModel : Combine.ObservableObject {
  @_Concurrency.MainActor public init(paymentRequest: MoyasarSdk.PaymentRequest, resultCallback: @escaping MoyasarSdk.STCResultCallback)
  @_Concurrency.MainActor public func initiatePayment() async
  @_Concurrency.MainActor public func submitOtp() async
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct PaymentAuthView : SwiftUI.UIViewRepresentable {
  @_Concurrency.MainActor @preconcurrency public var url: Foundation.URL
  @_Concurrency.MainActor @preconcurrency public var callback: MoyasarSdk.WebViewResultCallback
  @_Concurrency.MainActor @preconcurrency public func makeCoordinator() -> MoyasarSdk.PaymentAuthView.Coordinator
  @_Concurrency.MainActor @preconcurrency public func makeUIView(context: MoyasarSdk.PaymentAuthView.Context) -> WebKit.WKWebView
  @_Concurrency.MainActor @preconcurrency public func updateUIView(_ wkWebView: WebKit.WKWebView, context: MoyasarSdk.PaymentAuthView.Context)
  @objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class Coordinator : ObjectiveC.NSObject, WebKit.WKNavigationDelegate {
    @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
    @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
    @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
    @objc deinit
  }
  public typealias Body = Swift.Never
  public typealias UIViewType = WebKit.WKWebView
}
public typealias WebViewResultCallback = (MoyasarSdk.WebViewResult) -> ()
public struct WebViewPaymentInfo {
}
public enum WebViewResult {
  case completed(MoyasarSdk.WebViewPaymentInfo)
  case failed(MoyasarSdk.PaymentAuthError)
}
public enum PaymentAuthError : Swift.Error {
  case timeOut
  case notConnectedToInternet
  case unexpectedError(any Swift.Error)
}
public enum PaymentResult {
  case completed(MoyasarSdk.ApiPayment)
  case saveOnlyToken(MoyasarSdk.ApiToken)
  case failed(MoyasarSdk.MoyasarError)
  case canceled
}
@_Concurrency.MainActor public class CreditCardViewModel : Foundation.ObservableObject {
  @_Concurrency.MainActor public init(paymentRequest: MoyasarSdk.PaymentRequest, resultCallback: @escaping MoyasarSdk.ResultCallback)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public typealias ResultCallback = (MoyasarSdk.PaymentResult) -> ()
public typealias STCResultCallback = (Swift.Result<MoyasarSdk.ApiPayment, MoyasarSdk.MoyasarError>) -> ()
public struct ApiCreditCardSource : Swift.Codable {
  public init(type: Swift.String = "creditcard", name: Swift.String, number: Swift.String, month: Swift.String? = nil, year: Swift.String? = nil, cvc: Swift.String? = nil, transactionUrl: Swift.String? = nil, message: Swift.String? = nil, token: Swift.String? = nil, manual: Swift.String? = nil, saveCard: Swift.Bool? = false, company: Swift.String? = nil, gatewayId: Swift.String? = nil, referenceNumber: Swift.String? = nil, responseCode: Swift.String? = nil, authorizationCode: Swift.String? = nil, issuerName: Swift.String? = nil, issuerCountry: Swift.String? = nil, issuerCardType: Swift.String? = nil, isserCardCategory: Swift.String? = nil)
  public var type: Swift.String
  public var name: Swift.String
  public var number: Swift.String
  public var month: Swift.String?
  public var year: Swift.String?
  public var cvc: Swift.String?
  public var transactionUrl: Swift.String?
  public var message: Swift.String?
  public var token: Swift.String?
  public var manual: Swift.String?
  public var saveCard: Swift.Bool?
  public var company: Swift.String?
  public var gatewayId: Swift.String?
  public var referenceNumber: Swift.String?
  public var responseCode: Swift.String?
  public var authorizationCode: Swift.String?
  public var issuerName: Swift.String?
  public var issuerCountry: Swift.String?
  public var issuerCardType: Swift.String?
  public var isserCardCategory: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct StcOtpRequest : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ApiPaymentRequest : Swift.Codable {
  public init(paymentRequest: MoyasarSdk.PaymentRequest, callbackUrl: Swift.String? = nil, source: MoyasarSdk.ApiPaymentSource)
  public var publishableApiKey: Swift.String?
  public var amount: Swift.Int
  public var currency: Swift.String
  public var description: Swift.String?
  public var callbackUrl: Swift.String?
  public var givenID: Swift.String?
  public var source: MoyasarSdk.ApiPaymentSource
  public var metadata: [Swift.String : MoyasarSdk.MetadataValue]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum MetadataValue : Swift.Codable {
  case stringValue(Swift.String)
  case integerValue(Swift.Int)
  case floatValue(Swift.Float)
  case booleanValue(Swift.Bool)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct ApiTokenRequest : Swift.Codable {
  public init(name: Swift.String, number: Swift.String, cvc: Swift.String?, month: Swift.String?, year: Swift.String?, saveOnly: Swift.Bool = false, callbackUrl: Swift.String?, metadata: [Swift.String : MoyasarSdk.MetadataValue]? = [:])
  public var name: Swift.String
  public var number: Swift.String
  public var cvc: Swift.String?
  public var month: Swift.String?
  public var year: Swift.String?
  public var saveOnly: Swift.Bool
  public var callbackUrl: Swift.String?
  public var metadata: [Swift.String : MoyasarSdk.MetadataValue]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MoyasarSdk.STCPayView : Swift.Sendable {}
extension MoyasarSdk.MoyasarLanguageCode : Swift.Equatable {}
extension MoyasarSdk.MoyasarLanguageCode : Swift.Hashable {}
extension MoyasarSdk.MoyasarLanguageCode : Swift.RawRepresentable {}
extension MoyasarSdk.CreditCardView : Swift.Sendable {}
extension MoyasarSdk.ApiPaymentStatus : Swift.Equatable {}
extension MoyasarSdk.ApiPaymentStatus : Swift.Hashable {}
extension MoyasarSdk.ApiPaymentStatus : Swift.RawRepresentable {}
extension MoyasarSdk.PayButtonType : Swift.Equatable {}
extension MoyasarSdk.PayButtonType : Swift.Hashable {}
extension MoyasarSdk.CreditCardNetwork : Swift.Equatable {}
extension MoyasarSdk.CreditCardNetwork : Swift.Hashable {}
extension MoyasarSdk.STCPayViewModel : Swift.Sendable {}
extension MoyasarSdk.PaymentAuthView : Swift.Sendable {}
extension MoyasarSdk.PaymentAuthView.Coordinator : Swift.Sendable {}
extension MoyasarSdk.CreditCardViewModel : Swift.Sendable {}
